name: builds

on: push

jobs:
  create-builds:
    name: ${{ runner.os }} | ${{ matrix.architecture }} | ${{ matrix.type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            python-version: 3.8
            architecture: x64
            appimage: true
            type: AppImage
          - os: ubuntu-20.04
            python-version: 3.8
            architecture: x64
            archive: true
            type: Standalone
          - os: macos-10.15
            python-version: 3.8
            architecture: x64
            dmg: true
            type: DMG
          - os: windows-2019
            python-version: 3.8
            architecture: x86
            innosetup: true
            type: Installer
          - os: windows-2019
            python-version: 3.8
            architecture: x86
            archive: true
            type: Standalone
          - os: windows-2019
            python-version: 3.8
            architecture: x64
            innosetup: true
            type: Installer
          - os: windows-2019
            python-version: 3.8
            architecture: x64
            archive: true
            type: Standalone

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Bundle JRE
        shell: bash
        run: |
          python ./scripts/getjdk.py --binary --arch ${{ matrix.architecture }} --feature-version 11 --image-type jre --extract-to resources
          mv resources/jdk* resources/java

      - name: Install python dependencies
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install -U -r requirements/in/dev.in

      - name: Package application
        shell: bash
        run: |
          if [[ ${{ matrix.archive }} == 'true' ]]; then
            if [[ ${{ runner.os }} == 'Linux' ]]; then
              # Remove GTK3 Platform theme on linux before freezing as it mostly causes
              # ABI incompatibility issues when run on other distributions.
              find "$RUNNER_TOOL_CACHE/Python" -type f -name libqgtk3.so -delete
            fi
            python setup.py standalone
          elif [[ ${{ matrix.appimage }} == 'true' ]]; then
            sudo wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /usr/local/bin/appimagetool
            sudo chmod +x /usr/local/bin/appimagetool
            python setup.py appimage --skip-tests
          elif [[ ${{ matrix.dmg }} == 'true' ]]; then
            python setup.py createdmg
          elif [[ ${{ matrix.innosetup }} == 'true' ]]; then
            export ISCC_EXE="C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
            python setup.py innosetup
          fi

      - name: Prepare artifact metadata
        id: artifact-metadata
        shell: bash
        run: |
          SHA="$(git rev-parse --short "$GITHUB_SHA")"
          PLATFORM="${{ runner.os }}"
          ARCH="${{ matrix.architecture }}"
          TYPE="${{ matrix.type }}"
          NAME="Eddy-$PLATFORM-$ARCH-$TYPE-$SHA"
          echo "::set-output name=name::$(echo "$NAME")"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.artifact-metadata.outputs.name }}
          path: dist/*
